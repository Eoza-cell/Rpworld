import axios from 'axios';

class FreeAI {
  constructor() {
    // API gratuite sans cl√© - DuckDuckGo AI Chat
    this.baseURL = 'https://duckduckgo.com/duckchat/v1/chat';
    this.backupURL = 'https://text.pollinations.ai';
  }

  async generateNarrative(context) {
    console.log('ü§ñ Appel IA gratuite pour generateNarrative...');
    try {
      const systemPrompt = `Tu es ESPRIT-MONDE, une IA de jeu de r√¥le immersif qui contr√¥le tout le monde de Livium.

R√îLE:
- Tu es le narrateur du monde, pas un assistant
- Tu d√©cris les cons√©quences des actions du joueur de mani√®re r√©aliste et immersive
- Tu fais vivre les PNJ, l'environnement, les √©v√©nements
- Tu ne poses JAMAIS de questions au joueur
- Tu d√©cris ce qui arrive, point final

STYLE:
- Narratif, descriptif, immersif
- Pr√©sent de l'indicatif
- Focalisation sur les sensations, d√©tails concrets
- Maximum 4-5 phrases courtes et percutantes
- Pas de questions, pas de suggestions

INFOS CONTEXTUELLES:
${context.playerStats ? `Stats joueur: Sant√© ${context.playerStats.health}%, √ânergie ${context.playerStats.energy}%, Faim ${context.playerStats.hunger}%, Mental ${context.playerStats.mental}%, Wanted ${context.playerStats.wanted}%` : ''}
${context.location ? `Lieu: ${context.location}` : ''}
${context.time ? `Heure: ${context.time}` : ''}
${context.weather ? `M√©t√©o: ${context.weather}` : ''}`;

      const userPrompt = `${context.action ? `Action du joueur: ${context.action}` : ''}
${context.consequences ? `Cons√©quences calcul√©es: ${context.consequences}` : ''}
${context.npcsPresent ? `PNJ pr√©sents: ${context.npcsPresent}` : ''}

G√©n√®re une narration immersive d√©crivant ce qui se passe maintenant.`;

      // Essai avec Pollinations (mise √† jour de l'URL)
      try {
        const fullPrompt = `${systemPrompt}\n\n${userPrompt}`;
        const response = await axios.post(
          this.backupURL,
          fullPrompt,
          {
            headers: {
              'Content-Type': 'text/plain'
            },
            timeout: 15000
          }
        );

        if (response.data && response.data.length > 10) {
          console.log('‚úÖ IA r√©ponse re√ßue');
          return response.data;
        }
      } catch (pollinationsError) {
        console.log('‚ö†Ô∏è Pollinations indisponible, utilisation du fallback');
      }

      // Fallback
      return this.getFallbackNarrative(context);
    } catch (error) {
      console.error('‚ùå Erreur API IA:', error.message);
      return this.getFallbackNarrative(context);
    }
  }

  getFallbackNarrative(context) {
    const narratives = [
      `Tu avances dans ${context.location || 'les rues de Livium'}. L'atmosph√®re est tendue. Les passants t'observent avec m√©fiance.`,
      `${context.location || 'La zone'} est calme pour le moment. Tu ressens ${context.playerStats?.energy < 50 ? 'une grande fatigue' : 'l\'√©nergie couler en toi'}.`,
      `Le temps passe. ${context.weather || 'Le ciel'} domine la sc√®ne. Tu continues ton chemin dans Livium.`
    ];
    return narratives[Math.floor(Math.random() * narratives.length)];
  }

  async analyzeAction(actionText, playerContext) {
    try {
      const systemPrompt = `Tu es un analyseur d'actions pour un jeu RP. Analyse l'action du joueur et extrais:
1. Type d'action (d√©placement, interaction, combat, vol, commerce, etc.)
2. Intensit√© (faible, mod√©r√©e, √©lev√©e, extr√™me)
3. Risque (aucun, faible, moyen, √©lev√©, critique)
4. Cible √©ventuelle
5. Intention du joueur

R√©ponds UNIQUEMENT en format JSON sans markdown:
{
  "type": "type d'action",
  "intensity": "intensit√©",
  "risk": "risque",
  "target": "cible ou null",
  "intent": "intention principale"
}`;

      const response = await axios.post(
        this.backupURL,
        `${systemPrompt}\n\nAction: ${actionText}`,
        {
          headers: {
            'Content-Type': 'text/plain'
          },
          timeout: 15000
        }
      );

      try {
        const cleaned = response.data.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
        return JSON.parse(cleaned);
      } catch {
        return this.getDefaultAnalysis(actionText);
      }
    } catch (error) {
      console.error('Erreur analyse action:', error.message);
      return this.getDefaultAnalysis(actionText);
    }
  }

  getDefaultAnalysis(actionText) {
    const text = actionText.toLowerCase();
    
    // Analyse basique par mots-cl√©s
    let type = "action_libre";
    let intensity = "mod√©r√©e";
    let risk = "moyen";
    
    if (text.includes('aller') || text.includes('marcher') || text.includes('courir')) {
      type = "d√©placement";
      risk = "faible";
    } else if (text.includes('parler') || text.includes('dire') || text.includes('demander')) {
      type = "interaction";
      risk = "faible";
    } else if (text.includes('voler') || text.includes('attaquer') || text.includes('frapper')) {
      type = "combat";
      intensity = "√©lev√©e";
      risk = "√©lev√©";
    } else if (text.includes('acheter') || text.includes('vendre')) {
      type = "commerce";
      risk = "faible";
    }
    
    return {
      type,
      intensity,
      risk,
      target: null,
      intent: "exploration"
    };
  }
}

export default new FreeAI();
