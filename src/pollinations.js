import axios from 'axios';

class FreeAI {
  constructor() {
    this.textBaseURL = 'https://text.pollinations.ai';
    this.imageBaseURL = 'https://image.pollinations.ai';
  }

  async generateNarrative(context) {
    console.log('ü§ñ Appel Pollinations AI pour narration...');
    try {
      const systemPrompt = `Tu es ESPRIT-MONDE, un narrateur de jeu de r√¥le (RP) ultra-immersif.

**R√îLE ABSOLU :**
- Tu es le ma√Ætre du jeu. Tu d√©cris le monde, les actions et leurs cons√©quences.
- **Ne joue PAS le personnage.** Adresse-toi √† lui par "tu".
- **NE JAMAIS poser de questions.** Ne donne jamais de suggestions.
- Tu d√©cris ce qui se passe de mani√®re **factuelle, cin√©matographique et r√©aliste**.

**TON STYLE D'√âCRITURE :**
- **3√®me personne limit√©e.** "Tu vois...", "Tu sens...", "La sc√®ne se d√©roule devant toi...".
- **Pr√©sent de l'indicatif.** L'action se passe maintenant.
- **Phrases courtes, directes, percutantes.** Entre 2 et 4 phrases maximum.

**CONTEXTE DU MONDE :**
- Joueur: ${context.playerName || 'un voyageur'}
- Lieu: ${context.location}
- Heure: ${context.time}, M√©t√©o: ${context.weather}
- PNJ Pr√©sents: ${context.npcsPresent || 'personne'}
- Historique r√©cent: ${context.history || 'aucune action r√©cente'}
- Inventaire cl√©: ${context.inventory || 'rien de particulier'}

**ACTION DU JOUEUR :**
- Action: "${context.action}"
- Cons√©quences directes: ${context.consequences}`;

      const userPrompt = `
**NARRE L'ACTION ET LA SC√àNE DE MANI√àRE IMMERSIVE ET R√âALISTE :**`;

      const fullPrompt = `${systemPrompt}\n\n${userPrompt}`;
      
      const encodedPrompt = encodeURIComponent(fullPrompt);
      const response = await axios.get(
        `${this.textBaseURL}/${encodedPrompt}`,
        {
          timeout: 20000, // 20 secondes
          headers: { 'Accept': 'text/plain' }
        }
      );

      if (response.data && typeof response.data === 'string' && response.data.length > 10) {
        console.log('‚úÖ Pollinations AI (narration) r√©ponse OK');
        return response.data.trim();
      }

      console.log('‚ö†Ô∏è R√©ponse de narration vide, utilisation du fallback');
      return this.getFallbackNarrative(context);
    } catch (error) {
      console.error('‚ùå Erreur Pollinations (narration):', error.message);
      return this.getFallbackNarrative(context);
    }
  }

  async generateImage(narrative) {
    console.log('üñºÔ∏è Appel Pollinations AI pour image...');
    try {
      // Prompt am√©lior√© pour une image immersive et stylis√©e
      const imagePrompt = `vue √† la premi√®re personne (POV) d'un jeu vid√©o de survie r√©aliste, photor√©aliste, ultra d√©taill√©, 4k, couleurs sombres, cinematic lighting, ${narrative}`;

      const encodedPrompt = encodeURIComponent(imagePrompt);
      const url = `${this.imageBaseURL}/prompt/${encodedPrompt}`;

      // Simple validation de l'URL
      const response = await axios.head(url, { timeout: 10000 });
      if (response.status === 200) {
        console.log('‚úÖ Pollinations AI (image) URL OK');
        return url;
      }
      return null;
    } catch (error) {
      console.error('‚ùå Erreur Pollinations (image):', error.message);
      return null;
    }
  }

  getFallbackNarrative(context) {
    const narratives = [
      `Tu avances dans ${context.location || 'les rues'}. L'atmosph√®re est tendue. Les passants t'observent avec m√©fiance.`,
      `${context.location || 'La zone'} est calme pour le moment. Tu ressens ${context.playerStats?.energy < 50 ? 'une grande fatigue' : 'l\'√©nergie couler en toi'}.`,
      `Le temps passe. ${context.weather || 'Le ciel'} domine la sc√®ne. Tu continues ton chemin dans cette ville.`
    ];
    return narratives[Math.floor(Math.random() * narratives.length)];
  }

  async analyzeAction(actionText, playerContext) {
    // Utiliser l'analyse locale par d√©faut pour plus de fiabilit√©
    return this.getDefaultAnalysis(actionText);
  }

  getDefaultAnalysis(actionText) {
    const text = actionText.toLowerCase();
    
    // Analyse basique par mots-cl√©s
    let type = "action_libre";
    let intensity = "mod√©r√©e";
    let risk = "moyen";
    
    if (text.includes('aller') || text.includes('marcher') || text.includes('courir')) {
      type = "d√©placement";
      risk = "faible";
    } else if (text.includes('parler') || text.includes('dire') || text.includes('demander')) {
      type = "interaction";
      risk = "faible";
    } else if (text.includes('voler') || text.includes('attaquer') || text.includes('frapper')) {
      type = "combat";
      intensity = "√©lev√©e";
      risk = "√©lev√©";
    } else if (text.includes('acheter') || text.includes('vendre')) {
      type = "commerce";
      risk = "faible";
    }
    
    return {
      type,
      intensity,
      risk,
      target: null,
      intent: "exploration"
    };
  }
}

export default new FreeAI();
